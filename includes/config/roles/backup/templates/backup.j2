#!/bin/bash
myid=$(id -u)
if [ "$myid" -eq 0 ]; then
  # Définition des variables de couleurs
  CSI="\033["
  CEND="${CSI}0m"
  CRED="${CSI}1;31m"
  CGREEN="${CSI}1;32m"
  CYELLOW="${CSI}1;33m"
  CCYAN="${CSI}0;36m"

  # Variables
  remote={{rclone.remote}}
  remote_backups=BACKUPS
  NB_MAX_BACKUP=3
  CDAY=$(date +%Y%m%d-%H%M)
  BACKUP_PARTITION=/home/{{ user.name }}/backup
  BACKUP_FOLDER=$BACKUP_PARTITION/backup-$CDAY
  ARCHIVE=$BACKUP_FOLDER/backup-$CDAY.tar.gz

  echo ""
  echo -e "${CRED}-------------------------------------------------------${CEND}"
  echo -e "${CRED} /!\ ATTENTION : SAUVEGARDE DU SERVEUR IMMINENTE /!\ ${CEND}"
  echo -e "${CRED}-------------------------------------------------------${CEND}"

  # Stop Plex
  plex=$(docker ps -aq --format={{ '{{' }}.Names{{ '}}' }} | grep -x 'plex' 1> /dev/null 2>&1 && echo true || echo false)
  if [[ ${plex} == "true" ]]; then
    echo -e "${CCYAN}> Arrêt de Plex${CEND}"
    docker stop plex
    sleep 5
  else
    echo -e "Plex non présent"
  fi

  echo ""
  echo -e "${CCYAN}#########################################################${CEND}"
  echo ""
  echo -e "${CCYAN}          DEMARRAGE DU SCRIPT DE SAUVEGARDE              ${CEND}"
  echo ""
  echo -e "${CCYAN}#########################################################${CEND}"
  echo ""

  # Backup Plex database
  mkdir -p $BACKUP_FOLDER

  echo -e "${CCYAN}> Création de l'archive${CEND}"
  tar cvzf $ARCHIVE -P {{ settings.storage }} /home/{{ lookup('env','USER') }}/.config/ssd /home/{{ lookup('env','USER') }}/.ansible /home/{{ lookup('env','USER') }}/.vault_pass /home/{{ lookup('env','USER') }}/scripts /home/{{ lookup('env','USER') }}/.config/rclone/rclone.conf /etc/systemd {{ settings.source }}/ssddb /opt/sa /opt/gen-sa --ignore-failed-read
  sleep 2s

  # Restart Plex
   if [[ ${plex} == "true" ]]; then
    echo -e "${CCYAN}> Lancement de plex${CEND}"
    docker start plex
    sleep 5
  fi


  echo -e "${CCYAN}> Envoie Archive vers Google Drive${CEND}"
  # Envoie Archive vers Google Drive
  rclone --config "/home/{{ lookup('env','USER') }}/.config/rclone/rclone.conf" copy "$BACKUP_FOLDER" "$remote:/{{user.name}}/$remote_backups/backup-$CDAY" --progress

  # Nombre de sauvegardes effectuées
  nbBackup=$(find $BACKUP_PARTITION -type d -name 'backup-*' | wc -l)

  if [[ "$nbBackup" -gt "$NB_MAX_BACKUP" ]]; then

      # Archive la plus ancienne
      oldestBackupPath=$(find $BACKUP_PARTITION -type d -name 'backup-*' -printf '%T+ %p\n' | sort | head -n 1 | awk '{print $2}')
      oldestBackupFile=$(find $BACKUP_PARTITION -type d -name 'backup-*' -printf '%T+ %p\n' | sort | head -n 1 | awk '{split($0,a,/\//); print a[5]}')

      # Suppression du répertoire du backup
      rm -rf "$oldestBackupPath"

    # Suppression Archive Google Drive
    echo -e "${CCYAN}> Suppression de l'archive la plus ancienne${CEND}"
    rclone --config "/home/{{ lookup('env','USER') }}/.config/rclone/rclone.conf" purge "$remote:/{{user.name}}/$remote_backups/$oldestBackupFile" --progress
  fi
  chown {{ lookup('env','USER') }}:{{ lookup('env','MYGIDNAME') }} "/home/{{ lookup('env','USER') }}/.config/rclone/rclone.conf"
  echo ""
  echo -e "${CRED}-------------------------------------------------------${CEND}"
  echo -e "${CRED}        SAUVEGARDE DU SERVEUR TERMINEE                 ${CEND}"
  echo -e "${CRED}-------------------------------------------------------${CEND}"
else
  echo -e "${CRED}-------------------------------------------------------${CEND}"
  echo -e "${CRED}  LA SAUVEGARDE DOIT ETRE LANCEE EN ROOT - ABANDON                 ${CEND}"
  echo -e "${CRED}-------------------------------------------------------${CEND}"
fi
