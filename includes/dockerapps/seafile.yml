#!/bin/bash

---
- hosts: localhost
  gather_facts: false
  tasks:
        
    # FACTS #######################################################################

    - name: create seafile state
      shell: |
        echo "1" > {{ settings.storage }}/status/seafile

    - name: Checking for existing app data
      stat:
        path: "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/authelia/configuration.yml"
      register: check

    - name: "Variables | Set 'cloudflare_enabled' variable"
      set_fact:
        cloudflare_enabled: "{{ true if not(
            (cloudflare.login is undefined)
            or
            (cloudflare.login is none)
            or
            (cloudflare.login | trim | length == 0)
            or
            (cloudflare.api is undefined)
            or
            (cloudflare.api is none)
            or
            (cloudflare.api | trim | length == 0)
          )
            else false }}"

    - name: "Variables | Set 'oauth_enabled' variable"
      set_fact:
        oauth_enabled: "{{ true if not(
            (oauth.client is undefined)
            or
            (oauth.client is none)
            or
            (oauth.client | trim | length == 0)
            or
            (oauth.secret is undefined)
            or
            (oauth.secret is none)
            or
            (oauth.secret | trim | length == 0)
            or
            (oauth.account is undefined)
            or
            (oauth.account is none)
            or
            (oauth.account | trim | length == 0)
          )
            else false }}"

    - name: "Variables | Set 'sub' variable"
      set_fact:
        sub_enabled: "{{ true if not(
            (sub.seafile is undefined)
            or
            (sub.seafile is none)
            or
            (sub.seafile | trim | length == 0)
          )
            else false }}"

    - name: "Set DNS Record on CloudFlare"
      include_tasks: "{{ settings.source }}/includes/config/roles/cloudflare/tasks/main.yml"
      vars:
        subdomain: "{{sub[pgrole][pgrole] if sub_enabled else pgrole}}"
      when: cloudflare_enabled

    - name: 'Set Known Facts'
      set_fact:
        pgrole: 'seafile'
        image: 'seafileltd/seafile-mc:latest'

    - name: Create seafile-net network
      community.docker.docker_network:
        name: seafile-net
        state: present

    - name: Creating paths
      file: "path={{item}} state=directory mode=0775 owner={{ lookup('env','MYUID') }} group={{ lookup('env','MYUID') }}"
      with_items:
        - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/{{pgrole}}"

    # LABELS #######################################################################
    - name: 'Ajout label traefik'
      set_fact:
        pg_labels:
          traefik.enable: 'true'
          ## HTTP Routers
          traefik.http.routers.seafile-rtr.entrypoints: 'http,https'
          traefik.http.routers.seafile-rtr.rule: 'Host(`{{sub.seafile if sub_enabled else pgrole}}.{{user.domain}}`)'
          traefik.http.routers.seafile-rtr.tls: 'true'
          traefik.http.routers.seafile-secure-rtr.entrypoints: 'http,https'
          traefik.http.routers.seafile-secure-rtr.rule: 'Host(`seafile.{{user.domain}}`)'
          traefik.http.routers.seafile-secure-rtr.tls: 'true'
          ## Middlewares
          traefik.http.routers.seafile-seafapp-rtr.middlewares: "{{ 'chain-authelia@file' if check.stat.exists | default(false) else 'chain-oauth@file' if oauth_enabled | default(false) else 'chain-basic-auth@file' }}"
          ## HTTP Services
          traefik.http.routers.seafile-rtr.service: 'seafile-svc'
          traefik.http.services.seafile-svc.loadbalancer.server.port: '80'

    - name: 'Deploying memcached'
      docker_container:
        name: 'memcached'
        image: 'memcached:1.5.6'
        entrypoint: 'memcached -m 256'
        pull: yes
        networks:
          - name: seafile-net

    - name: 'Deploying db-seafile'
      docker_container:
        name: 'db-seafile'
        recreate: true
        image: 'lscr.io/linuxserver/mariadb'
        pull: yes
        volumes:
          - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/{{pgrole}}/db-seafile:/config"
          - '/etc/localtime:/etc/localtime:ro'
        env:
          PUID: '{{ lookup('env','MYUID') }}'
          PGID: '{{ lookup('env','MYUID') }}'
          MYSQL_ROOT_PASSWORD: '{{user.pass}}'
        restart_policy: unless-stopped
        networks:
          - name: seafile-net
        state: started

    - name: Wait for 10 seconds before continuing
      wait_for:
        timeout: 10

    - name: 'Setting PG Volumes'
      set_fact:
        pg_volumes:
          - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/{{pgrole}}:/shared"

    - name: 'Setting PG ENV'
      set_fact:
        pg_env:
          DB_HOST: 'db-seafile'
          DB_ROOT_PASSWD: '{{user.pass}}'     
          SEAFILE_ADMIN_EMAIL: '{{user.mail}}'      
          SEAFILE_ADMIN_PASSWORD: '{{user.pass}}'
          SEAFILE_SERVER_HOSTNAME: '{{pgrole}}.{{user.domain}}'

    - name: 'Deploying {{pgrole}}'
      docker_container:
        name: '{{pgrole}}'
        image: '{{image}}'
        pull: yes
        volumes: '{{pg_volumes}}'
        env: '{{pg_env}}'
        restart_policy: unless-stopped
        networks:
          - name: traefik_proxy
          - name: seafile-net
        state: started
        labels: '{{pg_labels}}'


