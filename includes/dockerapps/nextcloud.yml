---
- hosts: localhost
  gather_facts: false
  vars_files:
    - "{{ settings.source }}/includes/dockerapps/templates/generique/generique.yml"

  tasks:
        
    # FACTS #######################################################################


    - name: Checking for existing app data
      stat:
        path: '{{ settings.storage }}/docker/{{user.name}}/authelia/configuration.yml'
      register: check

    - name: 'Set Known Facts'
      set_fact:
        pgrole: 'nextcloud'
        intport: '443'
        image: 'lscr.io/linuxserver/nextcloud'

    - name: "Set DNS Record on CloudFlare"
      include_tasks: "{{ settings.source }}/includes/config/roles/cloudflare/tasks/main.yml"
      vars:
        subdomain: "{{sub[pgrole][pgrole] if sub_enabled else pgrole}}"
      when: cloudflare_enabled

    - name: Creating paths
      file: "path={{item}} state=directory mode=0775 owner={{ lookup('env','MYUID') }} group={{ lookup('env','MYGID') }}"
      with_items:
        - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/{{pgrole}}"    

    # LABELS ######################################################################
    - name: 'Adding Traefik'
      set_fact:
        nextcloud_labels:
          traefik.enable: 'true'
          ## TCP Routers
          traefik.tcp.routers.{{pgrole}}-tcp.entrypoints: 'http,https'
          traefik.tcp.routers.{{pgrole}}-tcp.rule: 'HostSNI(`{{sub[pgrole][pgrole] if sub_enabled else pgrole}}.{{user.domain}}`)'
          traefik.tcp.routers.{{pgrole}}-tcp.tls: 'true'
          traefik.tcp.routers.{{pgrole}}-tcp.tls.passthrough: 'true'
          ## HTTP Services
          traefik.tcp.routers."{{pgrole}}"-tcp.service: "{{pgrole}}-tcp-svc"
          traefik.tcp.services."{{pgrole}}-tcp-svc".loadbalancer.server.port: "{{ intport }}"

    - name: 'Setting PG Volumes'
      set_fact:
        pg_volumes:
          - '/etc/localtime:/etc/localtime:ro'
          - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/{{pgrole}}/data:/data"
          - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/{{pgrole}}/conf:/config"
          - "/home/{{ lookup('env','USER') }}:/home/{{ lookup('env','USER') }}"

    - name: 'Setting PG ENV'
      set_fact:
        pg_env:
          PUID: "{{ lookup('env','MYUID') }}"
          PGID: "{{ lookup('env','MYGID') }}"

    - name: Create and start '{{pgrole}}' container
      docker_container:
        name: '{{pgrole}}'
        image: 'lscr.io/linuxserver/nextcloud'
        pull: yes
        env: '{{pg_env}}'
        volumes: '{{pg_volumes}}'
        networks:
          - name: traefik_proxy
        restart_policy: unless-stopped
        state: started
        labels: '{{nextcloud_labels}}'


    - name: Launch Pretask
      include_tasks: "{{ settings.source }}/includes/dockerapps/templates/generique/mariadb.yml"


######################### Coturn #############################################################

    - name: Creating paths
      file: "path={{item}} state=directory mode=0775 owner={{ lookup('env','MYUID') }} group={{ lookup('env','MYGID') }}"
      with_items:
        - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/coturn"    

    - name: 'SECRET'
      shell: | 
        openssl rand -hex 16
      register: secret

    - name: 'Setting PG Volumes'
      set_fact:
        coturn_volumes:
          - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/coturn:/var/lib/coturn"

    - name: Import default config
      template:
        src: "{{ settings.source }}/includes/dockerapps/templates/{{pgrole}}/turnserver.conf.j2"
        dest: "{{ settings.storage }}/docker/{{user.name}}/coturn/turnserver.conf"
        force: yes

    - name: Create and start coturn container
      docker_container:
        name: coturn
        hostname: coturn
        image: 'woahbase/alpine-coturn'
        pull: yes
        env:
          PUID: "{{ lookup('env','MYUID') }}"
          PGID: "{{ lookup('env','MYGID') }}"
        volumes: '{{coturn_volumes}}'
        network_mode: host
        restart_policy: unless-stopped
        state: started

####################### Collabora #############################################################

    - name: "Set DNS Record on CloudFlare"
      include_tasks: "{{ settings.source }}/includes/config/roles/cloudflare/tasks/main.yml"
      vars:
        subdomain: collabora
      when: cloudflare_enabled

    - name: 'Adding Traefik'
      set_fact:
        co_labels:
          traefik.enable: 'true'
          traefik.http.routers.collabora-rtr.entrypoints: 'http,https'
          traefik.http.routers.collabora-rtr.rule: 'Host(`collabora.{{user.domain}}`)'
          traefik.http.routers.collabora-rtr.tls: 'true'
          ## HTTP Services
          traefik.http.routers.collabora-rtr.service: 'collabora-svc'
          traefik.http.services.collabora-svc.loadbalancer.server.port: '9980'

    - name: Create and start Collabora container
      docker_container:
        name: collabora
        image: 'collabora/code'
        pull: yes
        env:
          extra_params: '--o:ssl.enable=false --o:ssl.termination=true'
          domain: 'nextcloud\\.{{user.domain}}'
          username: "{{ lookup('env','USER') }}"
          password: '{{user.pass}}'
          DONT_GEN_SSL_CERT: 'true'
        networks:
          - name: traefik_proxy
        restart_policy: unless-stopped
        state: started
        labels: '{{co_labels}}'

#####################OnllyOffice###############################################################

    - name: "Set DNS Record on CloudFlare"
      include_tasks: "{{ settings.source }}/includes/config/roles/cloudflare/tasks/main.yml"
      vars:
        subdomain: office
      when: cloudflare_enabled

    - name: 'Adding Traefik'
      set_fact:
        off_labels:
          traefik.enable: 'true'
          traefik.http.routers.office-rtr.entrypoints: 'http,https'
          traefik.http.routers.office-rtr.rule: 'Host(`office.{{user.domain}}`)'
          traefik.http.routers.office-rtr.tls: 'true'
          traefik.http.routers.office-rtr.service: 'office-svc'
          traefik.http.services.office-svc.loadbalancer.server.port: '80'
          traefik.http.services.office-svc.loadbalancer.passhostheader: 'true'
          traefik.http.routers.office-rtr.middlewares: 'office-sslheaders'
          traefik.http.middlewares.office-sslheaders.headers.customrequestheaders.X-Forwarded-Proto: 'https'

    - name: Create and start office container
      docker_container:
        name: office
        image: 'onlyoffice/documentserver:latest'
        pull: yes
        interactive: True
        tty: true
        networks:
          - name: traefik_proxy
        restart_policy: unless-stopped
        state: started
        labels: '{{off_labels}}'
