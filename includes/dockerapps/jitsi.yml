#!/bin/bash

---
  - hosts: localhost
    gather_facts: false
    tasks:

      - name: 'JICOFO_COMPONENT_SECRET'
        shell: | 
          openssl rand -hex 16
        register: jicofo_component_secret
  
      - name: 'JICOFO_AUTH_PASSWORD'
        shell: | 
          openssl rand -hex 16
        register: jicofo_auth_passwd
  
      - name: 'JVB_AUTH_PASSWORD'
        shell: | 
          openssl rand -hex 16
        register: jvb_auth_passwd
  
      - name: 'JIGASI_XMPP_PASSWORD'
        shell: | 
          openssl rand -hex 16
        register: jigasi_xmpp_password
  
      - name: 'JIBRI_RECORDER_PASSWORD'
        shell: | 
          openssl rand -hex 16
        register: jibri_recorder_password
  
      - name: 'JIBRI_XMPP_PASSWORD'
        shell: | 
          openssl rand -hex 16
        register: jibri_xmpp_password

      - name: Checking for existing app data
        stat:
          path: '{{ settings.storage }}/docker/{{user.name}}/authelia/configuration.yml'
        register: check

      - name: 'Set Known Facts'
        set_fact:
          pgrole: 'jitsi'
          intport: '80'
          image: 'jitsi/web'

      - name: "Variables | Set 'cloudflare_enabled' variable"
        set_fact:
          cloudflare_enabled: "{{ true if not(
              (cloudflare.login is undefined)
              or
              (cloudflare.login is none)
              or
              (cloudflare.login | trim | length == 0)
              or
              (cloudflare.api is undefined)
              or
              (cloudflare.api is none)
              or
              (cloudflare.api | trim | length == 0)
            )
              else false }}"
  
      - name: "Variables | Set 'oauth_enabled' variable"
        set_fact:
          oauth_enabled: "{{ true if not(
              (oauth.client is undefined)
              or
              (oauth.client is none)
              or
              (oauth.client | trim | length == 0)
              or
              (oauth.secret is undefined)
              or
              (oauth.secret is none)
              or
              (oauth.secret | trim | length == 0)
              or
              (oauth.account is undefined)
              or
              (oauth.account is none)
              or
              (oauth.account | trim | length == 0)
            )
              else false }}"

      - name: "Variables | Set 'sub' variable"
        set_fact:
          sub_enabled: "{{ true if not(
              (sub[pgrole][pgrole] is undefined)
              or
              (sub[pgrole][pgrole] is none)
              or
              (sub[pgrole][pgrole] | trim | length == 0)
            )
              else false }}"
  
      - name: "Set DNS Record on CloudFlare"
        include_tasks: "{{ settings.source }}/includes/config/roles/cloudflare/tasks/main.yml"
        vars:
          subdomain: "{{sub[pgrole][pgrole] if sub_enabled else pgrole}}"
        when: cloudflare_enabled
    
      - name: Create meet.jitsi
        community.docker.docker_network:
          name: meet.jitsi
          state: present
  
      - name: 'Ajout label traefik'
        set_fact:
          pg_labels:
            traefik.enable: 'true'
            ## HTTP Routers
            traefik.http.routers.jitsi-rtr.entrypoints: 'http,https'
            traefik.http.routers.jitsi-rtr.rule: 'Host(`{{sub[pgrole][pgrole] if sub_enabled else pgrole}}.{{user.domain}}`)'
            traefik.http.routers.jitsi-rtr.tls: 'true'
            ## Middlewares
            ## HTTP Services
            traefik.http.routers.jitsi-rtr.service: 'jitsi-svc'
            traefik.http.services.jitsi-svc.loadbalancer.server.port: '80'
  
      - name: 'Setting jitsi Volumes'
        set_fact:
          jitsi_volumes:
            - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/.jitsi-meet-cfg/web:/config"
            - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/.jitsi-meet-cfg/web/letsencrypt:/etc/letsencrypt"
            - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/.jitsi-meet-cfg/transcripts:/usr/share/jitsi-meet/transcripts"
  
      - name: Creating scripts and plugins paths
        file: "path={{item}} state=directory mode=0775 owner={{ lookup('env','MYUID') }} group={{ lookup('env','MYGID') }}"
        with_items:
          - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/.jitsi-meet-cfg/"
          - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/.jitsi-meet-cfg/web"
  
      - name: 'Import config.js'
        template:
          src: "{{ settings.source }}/includes/dockerapps/templates/jitsi/config.js.j2"
          dest: "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/.jitsi-meet-cfg/web/config.js"
  
      - name: 'Setting jitsi ENV'
        set_fact:
          jitsi_env:
            JICOFO_AUTH_USER: 'focus'
            ENABLE_LETSENCRYPT: '1'
            LETSENCRYPT_DOMAIN: '{{pgrole}}.{{user.domain}}'
            LETSENCRYPT_EMAIL: '{{user.mail}}'
            XMPP_DOMAIN: 'meet.jitsi'
            XMPP_AUTH_DOMAIN: 'auth.meet.jitsi'
            XMPP_BOSH_URL_BASE: 'http://xmpp.meet.jitsi:5280'
            XMPP_GUEST_DOMAIN: 'guest.meet.jitsi'
            XMPP_MUC_DOMAIN: 'muc.meet.jitsi'
            XMPP_RECORDER_DOMAIN: 'recorder.meet.jitsi'
            JIBRI_BREWERY_MUC: 'jvbbrewery'
            JIBRI_PENDING_TIMEOUT: '90'
            JIBRI_XMPP_USER: 'jibri'
            JIBRI_XMPP_PASSWORD: '{{jibri_xmpp_password.stdout}}'
            JIBRI_RECORDER_USER: 'recorder'
            JIBRI_RECORDER_PASSWORD: '{{jibri_recorder_password.stdout}}'
            ENABLE_RECORDING: '1'
            TZ: 'Europe/Paris'
  
      - name: 'Deploying {{pgrole}}'
        docker_container:
          name: '{{pgrole}}'
          image: '{{image}}'
          published_ports:
            - '8000:80'
            - '8443:443'
          pull: yes
          volumes: '{{jitsi_volumes}}'
          env: '{{jitsi_env}}'
          restart_policy: unless-stopped
          networks:
            - name: meet.jitsi
              aliases:
                - xmpp.meet.jitsi
            - name: traefik_proxy
          state: started
          labels: '{{pg_labels}}'
  
  ###################################Prosody###########################################
  
      - name: 'Setting prosody Volumes'
        set_fact:
          prosody_volumes:
            - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/.jitsi-meet-cfg/prosody:/config"
  
      - name: 'Setting prosody ENV'
        set_fact:
          prosody_env:
            XMPP_INTERNAL_MUC_DOMAIN: 'internal-muc.meet.jitsi'
            XMPP_DOMAIN: 'meet.jitsi'
            XMPP_AUTH_DOMAIN: 'auth.meet.jitsi'
            XMPP_GUEST_DOMAIN: 'guest.meet.jitsi'
            XMPP_MUC_DOMAIN: 'muc.meet.jitsi'
            XMPP_RECORDER_DOMAIN: 'recorder.meet.jitsi'
            JICOFO_AUTH_USER: 'focus'
            JICOFO_COMPONENT_SECRET: '{{jicofo_component_secret.stdout}}'
            JICOFO_AUTH_PASSWORD: '{{jicofo_auth_passwd.stdout}}'
            JVB_AUTH_USER: 'jvb'
            JVB_AUTH_PASSWORD: '{{jvb_auth_passwd.stdout}}'
            JIGASI_XMPP_USER: 'jigasi'
            JIGASI_XMPP_PASSWORD: '{{jigasi_xmpp_password.stdout}}'
            JIBRI_XMPP_USER: 'jibri'
            JIBRI_XMPP_PASSWORD: '{{jibri_xmpp_password.stdout}}'
            JIBRI_RECORDER_USER: 'recorder'
            JIBRI_RECORDER_PASSWORD: '{{jibri_recorder_password.stdout}}'
            LOG_LEVEL: 'info'
            TZ: 'Europe/Paris'
  
      - name: 'Deploying prosody'
        docker_container:
          name: 'prosody'
          image: 'jitsi/prosody'
          pull: yes
          published_ports:
            - '5222:5222'
            - '5347:5347'
            - '5280:5280'
          volumes: '{{prosody_volumes}}'
          env: '{{prosody_env}}'
          restart_policy: unless-stopped
          networks:
            - name: meet.jitsi
              aliases:
                - xmpp.meet.jitsi
          state: started
  
  ##############################Jicofo################################################################
  
      - name: 'Setting jicofo Volumes'
        set_fact:
          jicofo_volumes:
            - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/.jitsi-meet-cfg/jicofo:/config"
  
      - name: 'Setting jicofo ENV'
        set_fact:
          jicofo_env:
            XMPP_INTERNAL_MUC_DOMAIN: 'internal-muc.meet.jitsi'
            XMPP_DOMAIN: 'meet.jitsi'
            XMPP_AUTH_DOMAIN: 'auth.meet.jitsi'
            XMPP_SERVER: 'xmpp.meet.jitsi'
            JICOFO_COMPONENT_SECRET: '{{jicofo_component_secret.stdout}}'
            JICOFO_AUTH_PASSWORD: '{{jicofo_auth_passwd.stdout}}'
            JICOFO_AUTH_USER: 'focus'
            JVB_BREWERY_MUC: 'jvbbrewery'
            JIGASI_BREWERY_MUC: 'jigasibrewery'
            JIGASI_SIP_URI: 'test@sip2sip.info'
            JIBRI_BREWERY_MUC: 'jibribrewery'
            JIBRI_PENDING_TIMEOUT: '90'
            TZ: 'Europe/Paris'
  
      - name: 'Deploying jicofo'
        docker_container:
          name: 'jicofo'
          image: 'jitsi/jicofo'
          pull: yes
          volumes: '{{jicofo_volumes}}'
          env: '{{jicofo_env}}'
          restart_policy: unless-stopped
          networks:
            - name: meet.jitsi
          state: started
  
  ##############################Jvb################################################################
  
      - name: 'Setting jvb Volumes'
        set_fact:
          jvb_volumes:
            - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/.jitsi-meet-cfg/jvb:/config"
  
      - name: 'Setting jvb ENV'
        set_fact:
          jvb_env:
            XMPP_INTERNAL_MUC_DOMAIN: 'internal-muc.meet.jitsi'
            XMPP_AUTH_DOMAIN: 'auth.meet.jitsi'
            XMPP_SERVER: 'xmpp.meet.jitsi'
            JVB_AUTH_USER: 'jvb'
            JVB_AUTH_PASSWORD: '{{jvb_auth_passwd.stdout}}'
            JVB_BREWERY_MUC: 'jvbbrewery'
            JVB_PORT: '10000'
            JVB_TCP_HARVESTER_DISABLED: 'true'
            JVB_TCP_PORT: '4443'
            JVB_STUN_SERVERS: 'stun.l.google.com:19302,stun1.l.google.com:19302,stun2.l.google.com:19302'
            JVB_ENABLE_APIS: 'rest,colibri'
            TZ: 'Europe/Paris'
  
      - name: 'Deploying jvb'
        docker_container:
          name: 'jvb'
          image: 'jitsi/jvb'
          published_ports:
            - '10000:10000/udp'
            - '4443:4443'
          pull: yes
          volumes: '{{jvb_volumes}}'
          env: '{{jvb_env}}'
          restart_policy: unless-stopped
          networks:
            - name: meet.jitsi
          state: started
  
      - name: "Containers | Restart Jitsi"
        shell: docker restart jitsi
